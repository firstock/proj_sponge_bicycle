library(caret)
grid<-expand.grid(.n.trees=seq(100,5000,by=200),.interaction.depth=seq(1,4,by=1),.shrinkage=c(.001,.01,.1),
.n.minobsinnode=10)
control<-trainControl(method = "CV")
gbm.train<-train(rentcnt~.,data=data,method='gbm',trControl=control)
gbm.train
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
# data <- read.csv("성동구.csv", header = T)
# data <- read.csv("양천구.csv", header = T)
# data <- read.csv("영등포구.csv", header = T)
# data <- read.csv("용산구.csv", header = T)
# data <- read.csv("은평구.csv", header = T)
# data <- read.csv("종로구.csv", header = T)
data <- read.csv("중구.csv", header = T)
data <- data[, 3:26]
dim(data);head(data)
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
X <- data[,2:19]
y <- data[,1]
# Tuning Gradient Boosting
# install.packages("caret")
library(caret)
grid<-expand.grid(.n.trees=seq(100,5000,by=200),.interaction.depth=seq(1,4,by=1),.shrinkage=c(.001,.01,.1),
.n.minobsinnode=10)
control<-trainControl(method = "CV")
gbm.train<-train(rentcnt~.,data=data,method='gbm',trControl=control)
gbm.train
data <- read.csv("광진구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
data <- read.csv("동대문구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
getwd()
setwd("C:\\github\\proj_sponge_bicycle\\data_join\\totalByArea")
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
data <- read.csv("마포구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
# data <- read.csv("광진구.csv", header = T)
data <- read.csv("동대문구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
data <- read.csv("마포구.csv", header = T)
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
data <- read.csv("마포구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
data <- read.csv("서대문구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
data <- read.csv("성동구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
# data <- read.csv("성동구.csv", header = T)
data <- read.csv("양천구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
# data <- read.csv("성동구.csv", header = T)
# data <- read.csv("양천구.csv", header = T)
data <- read.csv("영등포구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
# data <- read.csv("성동구.csv", header = T)
# data <- read.csv("양천구.csv", header = T)
# data <- read.csv("영등포구.csv", header = T)
data <- read.csv("용산구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
# data <- read.csv("성동구.csv", header = T)
# data <- read.csv("양천구.csv", header = T)
# data <- read.csv("영등포구.csv", header = T)
# data <- read.csv("용산구.csv", header = T)
data <- read.csv("은평구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
# data <- read.csv("성동구.csv", header = T)
# data <- read.csv("양천구.csv", header = T)
# data <- read.csv("영등포구.csv", header = T)
# data <- read.csv("용산구.csv", header = T)
# data <- read.csv("은평구.csv", header = T)
data <- read.csv("종로구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
summary(model)
# data <- read.csv("광진구.csv", header = T)
# data <- read.csv("동대문구.csv", header = T)
# data <- read.csv("마포구.csv", header = T)
# data <- read.csv("서대문구.csv", header = T)
# data <- read.csv("성동구.csv", header = T)
# data <- read.csv("양천구.csv", header = T)
# data <- read.csv("영등포구.csv", header = T)
# data <- read.csv("용산구.csv", header = T)
# data <- read.csv("은평구.csv", header = T)
# data <- read.csv("종로구.csv", header = T)
data <- read.csv("중구.csv", header = T)
dim(data);head(data)
data <- data[, 3:26]
data <- data[,c(1:15, 17, 18, 23, 24)]
str(data)
data <- data.frame(scale(data, scale = T, center = T))
head(data);str(data);dim(data)
##########################################################################
# Random forest
# install.packages("randomForest")
library(randomForest)
fit.rf <- randomForest(rentcnt ~., data = data, ntree = 5000)
rf.pred <- fit.rf$predicted
rf.error <- rf.pred - data[["rentcnt"]]
sqrt(mean(rf.error^2)) # RMSE of random forest
#########################################################
##Gradient Boosting for 10-fold cross validation##
# install.packages("gbm")
library(gbm)
cv.folds <- function (n, folds = 10) {
split(sample(1:n), rep(1:folds, length = n))
}
(K <- 10)
# (K <- nrow(dat))
(all.folds <- cv.folds(nrow(data), K))
str(all.folds)
cv.RMSE <- NULL
for(j in 1:K){
test  <- all.folds[[j]]
model <- gbm(rentcnt ~ ., data=data[-test,], distribution = "gaussian", n.trees = 150, shrinkage = 0.1, interaction.depth = 3, n.minobsinnode = 10)
pred  <- predict.gbm(model, data[test,], n.trees = 150)
cv.RMSE[j] <- sqrt(sum((data[test,]$rentcnt - pred)^2)/length(pred))
}
list(cv.RMSE, mean(cv.RMSE))
